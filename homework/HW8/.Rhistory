model.3.2 = lm(adr^(1/4)~is_canceled + lead_time + year + week + adults +
children + meal * market_segment + room_type + customer_type +
requests, train_data)
summary(model.3.2)
## test error (RMSE)
predicted.adr = predict(model.3.2, newdata=test_x)
sqrt(sum((predicted.adr^4-test_y)^2/length(test_y)))
plot(model.3.2)
## constant variance test
bptest(model.3.2)
## normality
shapiro.test(residuals(model.3.2))
plot(train_data$adr^(1/4))
plot(train_data$adr)
plot(train_data$adr^(1/4))
plot(train_data$adr)
plot(train_data$adr^(1/4),train_data$lead_time^2)
plot(train_data$adr)
plot(train_data$lead_time^2,train_data$adr^(1/4))
plot(train_data$adr)
plot(train_data$lead_time,train_data$adr^(1/4))
plot(train_data$adr)
plot(log(train_data$lead_time),train_data$adr^(1/4))
plot(train_data$adr)
plot(train_data$lead_time,train_data$adr^(1/4))
plot(train_data$adr)
plot(train_data$lead_time^(1/4),train_data$adr^(1/4))
## 3.2 linear regression
model.3.2 = lm(adr^(1/4)~is_canceled + lead_time^(1/4) + year + week + adults +
children + meal + market_segment + room_type + customer_type +
requests, train_data)
knitr::opts_chunk$set(echo = TRUE)
library(lmtest)
library(corrplot)
library(randomForest)
library(leaps)
library(splines)
library(faraway)
library(nlme)
library(MASS)
## read data
data_all = read.csv('stat425_fpdata.csv')
data = data_all[data_all$hotel=='City Hotel',]
data = data[, -1] ## delete variable hotel
colnames(data)[which(names(data) == "arrival_date_year")] <- "year"
colnames(data)[which(names(data) == "arrival_date_week_number")] <- "week"
colnames(data)[which(names(data) == "arrival_date_month")] <- "month"
colnames(data)[which(names(data) == "arrival_date_day_of_month")] <- "day"
colnames(data)[which(names(data) == "stays_in_weekend_nights")] <- "weekend_night"
colnames(data)[which(names(data) == "stays_in_week_nights")] <- "week_night"
colnames(data)[which(names(data) == "reserved_room_type")] <- "room_type"
colnames(data)[which(names(data) == "total_of_special_requests")] <- "requests"
## reset row index
# row.names(data) = 1:nrow(data)
## check missing value
sum(is.na(data))
dim(data)
data = data[which(data$adr>12),]
data = data[which(data$market_segment!='Aviation'),]
data = data[which(data$market_segment!='Complementary'),]
data = data[which(data$room_type!='C'),]
data$is_canceled = as.factor(data$is_canceled)
data$week = as.factor(data$week)
data$year = as.factor(data$year)
#data$arrival_date_day_of_month = as.factor(data$arrival_date_day_of_month)
#data$stay = data$stays_in_week_nights+data$stays_in_weekend_nights
#data$is_popular = ifelse(data$arrival_date_month %in% c('January','February','March'), 0, 1)
data = subset(data,select=-c(month))
## check collinearity
numeric = unlist(lapply(data, is.numeric))
corrplot(cor(data[,numeric]), method="ellipse")
round(cor(data[,numeric]),1)
summary(data)
plot(adr~.,data)
plot(data$lead_time, data$adr)
## train_test_split
set.seed(123)
index = sample(1:nrow(data),size=floor(0.7*nrow(data)))
train_data = data[index,]
test_data = data[-index,]
test_x = subset(test_data, select = -c(adr))
test_y = test_data$adr
## 3.1 simple model
model.3.1 = lm(adr~., train_data)
summary(model.3.1)
plot(model.3.1)
## test error (RMSE)
predicted.adr = predict(model.3.1, newdata=test_x)
sqrt(sum((predicted.adr-test_y)^2/length(test_y)))
## 3.1 model diagnostics
## reset index
# row.names(data) = 1:nrow(data)
## check leverage
n=nrow(train_data); p=ncol(train_data);
lev=influence(model.3.1)$hat
halfnorm(lev, 5, labs=row.names(train_data), ylab="Leverages")
sort(lev, decreasing = TRUE)[1:5]
## check outliers
jack=rstudent(model.3.1);
qt(.05/(2*n), n-p-1)
sort(abs(jack), decreasing=TRUE)[1:5]
## Influential observations
cook = cooks.distance(model.3.1)
halfnorm(cook, nlab=5, labs=row.names(train_data), ylab="Cook's distances")
sort(abs(cook), decreasing=TRUE)[1:5]
#max(cook)
deleted = c('1644', '1722', '1700')
train_data = train_data[!row.names(train_data) %in% deleted,]
## constant variance test
bptest(model.3.1)
## normality
shapiro.test(residuals(model.3.1))
## boxcox
bc = boxcox(model.3.1)
bc$x[bc$y == max(bc$y)]
## refit with new data
model.3.1 = lm(adr~., train_data)
## variable selection
step(model.3.1, direction="both")
## 3.2 linear regression
model.3.2 = lm(adr^(1/4)~is_canceled + lead_time^(1/4) + year + week + adults +
children + meal + market_segment + room_type + customer_type +
requests, train_data)
## 3.2 linear regression
model.3.2 = lm(adr^(1/4)~is_canceled + lead_time^(1/4) + year + week + adults +
children + meal + market_segment + room_type + customer_type +
requests, train_data)
knitr::opts_chunk$set(echo = TRUE)
library(lmtest)
library(corrplot)
library(randomForest)
library(leaps)
library(splines)
library(faraway)
library(nlme)
library(MASS)
## read data
data_all = read.csv('stat425_fpdata.csv')
data = data_all[data_all$hotel=='City Hotel',]
data = data[, -1] ## delete variable hotel
colnames(data)[which(names(data) == "arrival_date_year")] <- "year"
colnames(data)[which(names(data) == "arrival_date_week_number")] <- "week"
colnames(data)[which(names(data) == "arrival_date_month")] <- "month"
colnames(data)[which(names(data) == "arrival_date_day_of_month")] <- "day"
colnames(data)[which(names(data) == "stays_in_weekend_nights")] <- "weekend_night"
colnames(data)[which(names(data) == "stays_in_week_nights")] <- "week_night"
colnames(data)[which(names(data) == "reserved_room_type")] <- "room_type"
colnames(data)[which(names(data) == "total_of_special_requests")] <- "requests"
## reset row index
# row.names(data) = 1:nrow(data)
## check missing value
sum(is.na(data))
dim(data)
data = data[which(data$adr>12),]
data = data[which(data$market_segment!='Aviation'),]
data = data[which(data$market_segment!='Complementary'),]
data = data[which(data$room_type!='C'),]
data$is_canceled = as.factor(data$is_canceled)
data$week = as.factor(data$week)
data$year = as.factor(data$year)
#data$arrival_date_day_of_month = as.factor(data$arrival_date_day_of_month)
#data$stay = data$stays_in_week_nights+data$stays_in_weekend_nights
#data$is_popular = ifelse(data$arrival_date_month %in% c('January','February','March'), 0, 1)
data = subset(data,select=-c(month))
## check collinearity
numeric = unlist(lapply(data, is.numeric))
corrplot(cor(data[,numeric]), method="ellipse")
round(cor(data[,numeric]),1)
summary(data)
plot(adr~.,data)
plot(data$lead_time, data$adr)
## train_test_split
set.seed(123)
index = sample(1:nrow(data),size=floor(0.7*nrow(data)))
train_data = data[index,]
test_data = data[-index,]
test_x = subset(test_data, select = -c(adr))
test_y = test_data$adr
## 3.1 simple model
model.3.1 = lm(adr~., train_data)
summary(model.3.1)
plot(model.3.1)
## test error (RMSE)
predicted.adr = predict(model.3.1, newdata=test_x)
sqrt(sum((predicted.adr-test_y)^2/length(test_y)))
## 3.1 model diagnostics
## reset index
# row.names(data) = 1:nrow(data)
## check leverage
n=nrow(train_data); p=ncol(train_data);
lev=influence(model.3.1)$hat
halfnorm(lev, 5, labs=row.names(train_data), ylab="Leverages")
sort(lev, decreasing = TRUE)[1:5]
## check outliers
jack=rstudent(model.3.1);
qt(.05/(2*n), n-p-1)
sort(abs(jack), decreasing=TRUE)[1:5]
## Influential observations
cook = cooks.distance(model.3.1)
halfnorm(cook, nlab=5, labs=row.names(train_data), ylab="Cook's distances")
sort(abs(cook), decreasing=TRUE)[1:5]
#max(cook)
deleted = c('1644', '1722', '1700')
train_data = train_data[!row.names(train_data) %in% deleted,]
## constant variance test
bptest(model.3.1)
## normality
shapiro.test(residuals(model.3.1))
## boxcox
bc = boxcox(model.3.1)
bc$x[bc$y == max(bc$y)]
## refit with new data
model.3.1 = lm(adr~., train_data)
## variable selection
step(model.3.1, direction="both")
## 3.2 linear regression
model.3.2 = lm(adr^(1/4)~is_canceled + lead_time^(1/4) + year + week + adults +
children + meal + market_segment + room_type + customer_type +
requests, train_data)
## 3.2 linear regression
model.3.2 = lm(adr^(1/4)~is_canceled + lead_time + year + week + adults +
children + meal + market_segment + room_type + customer_type +
requests, train_data)
summary(model.3.2)
## test error (RMSE)
predicted.adr = predict(model.3.2, newdata=test_x)
sqrt(sum((predicted.adr^4-test_y)^2/length(test_y)))
plot(model.3.2)
## constant variance test
bptest(model.3.2)
## normality
shapiro.test(residuals(model.3.2))
## 3.2 linear regression
model.3.2 = lm(adr^(1/4)~is_canceled + lead_time^(1/4) + year + week + adults +
children + meal + market_segment + room_type + customer_type +
requests, train_data)
## 3.2 linear regression
model.3.2 = lm(adr^(1/4)~is_canceled + (lead_time+1)^(1/4) + year + week + adults +
children + meal + market_segment + room_type + customer_type +
requests, train_data)
## 3.2 linear regression
model.3.2 = lm(adr^(1/4)~is_canceled + log(lead_time) + year + week + adults +
children + meal + market_segment + room_type + customer_type +
requests, train_data)
## 3.2 linear regression
model.3.2 = lm(adr^(1/4)~is_canceled + log(lead_time+1) + year + week + adults +
children + meal + market_segment + room_type + customer_type +
requests, train_data)
summary(model.3.2)
## test error (RMSE)
predicted.adr = predict(model.3.2, newdata=test_x)
sqrt(sum((predicted.adr^4-test_y)^2/length(test_y)))
plot(model.3.2)
## constant variance test
bptest(model.3.2)
## normality
shapiro.test(residuals(model.3.2))
## 3.2 linear regression
model.3.2 = lm(adr^(1/4)~is_canceled + lead_time + year + week + adults +
children + meal + market_segment + room_type + customer_type +
requests, train_data)
summary(model.3.2)
## test error (RMSE)
predicted.adr = predict(model.3.2, newdata=test_x)
sqrt(sum((predicted.adr^4-test_y)^2/length(test_y)))
plot(model.3.2)
## constant variance test
bptest(model.3.2)
## normality
shapiro.test(residuals(model.3.2))
View(data_all)
plot(train_data$adr)
plot(train_data$lead_time^(2),train_data$adr^(1/4))
plot(train_data$adr)
plot(1/train_data$lead_time,train_data$adr^(1/4))
plot(train_data$adr)
plot(train_data$lead_time,train_data$adr^(1/4))
plot(train_data$adr)
plot(exp(train_data$lead_time),train_data$adr^(1/4))
plot(train_data$adr)
plot(log(train_data$lead_time),train_data$adr^(1/4))
plot(train_data$adr)
plot(log(train_data$lead_time),train_data$adr^(1/4))
summary(lm(adr~lead_time),train_data)
plot(train_data$adr)
plot(log(train_data$lead_time),train_data$adr^(1/4))
summary(lm(adr~lead_time,train_data))
plot(train_data$adr)
plot(log(train_data$lead_time),train_data$adr^(1/4))
summary(lm(adr~log(lead_time+1),train_data))
plot(train_data$adr)
plot(log(train_data$lead_time),train_data$adr^(1/4))
summary(lm(adr^(1/4)~lead_time,train_data))
plot(train_data$adr)
plot(log(train_data$lead_time),train_data$adr^(1/4))
summary(lm(adr~lead_time^2,train_data))
plot(train_data$adr)
plot(log(train_data$lead_time),train_data$adr^(1/4))
model = lm(adr~lead_time^2,train_data)
summary(model)
plot(model)
plot(train_data$adr)
plot(log(train_data$lead_time),train_data$adr^(1/4))
model = lm(adr~lead_time,train_data)
summary(model)
plot(model)
plot(train_data$adr)
plot(log(train_data$week_night),train_data$adr^(1/4))
#model = lm(adr~lead_time,train_data)
#summary(model)
#plot(model)
plot(train_data$adr)
plot(train_data$week_night^2,train_data$adr^(1/4))
#model = lm(adr~lead_time,train_data)
#summary(model)
#plot(model)
plot(train_data$adr)
plot(1/train_data$week_night,train_data$adr^(1/4))
#model = lm(adr~lead_time,train_data)
#summary(model)
#plot(model)
plot(train_data$adr)
plot(1/train_data$week_night,train_data$adr^(1/4))
model = lm(adr~week_night,train_data)
summary(model)
plot(model)
plot(train_data$adr)
plot(1/train_data$week_night,train_data$adr^(1/4))
model = lm(adr~1/week_night,train_data)
summary(model)
plot(model)
plot(train_data$adr)
plot(1/train_data$week_night,train_data$adr^(1/4))
model = lm(adr~week_night^2,train_data)
summary(model)
plot(model)
plot(train_data$adr)
plot(1/train_data$week_night,train_data$adr^(1/4))
model = lm(adr~log(week_night+1),train_data)
summary(model)
plot(model)
setwd("~/Desktop/SP20/STAT425/HW8")
load("~/Desktop/SP20/STAT425/HW8/dig14(1).rdata")
View(tr14)
View(test14)
knitr::opts_chunk$set(echo = TRUE)
library(faraway)
attach(diabetes)
diabetes
dim(diabetes)
library(faraway)
library(rpart)
attach(diabetes)
library(faraway)
library(rpart)
attach(diabetes)
pairs(diabetes, pch=".")
plot(glyhb~.,data=diabetes)
plot(glyhb~., data=diabetes)
par(mfrow = c(2, 2))
plot(glyhb~., data=diabetes)
par(mfrow = c(3, 3))
plot(glyhb~., data=diabetes)
cor(glyhb~., data=diabetes)
cor(diabetes)
cor(diabetes[,unlist(lapply(diabetes, is.numeric))  ])
summary(lm(glyhb~., data=diabetes))
par(mfrow = c(3, 3))
plot(glyhb~., data=diabetes)
summary(diabetes)
data = subset(diabetes, select=-c(bp.2s,bp.2d))
summary(data)
#summary(diabetes)
data = subset(diabetes, select=-c(bp.2s,bp.2d))
sum(is.na(data))
data1 = na.omit(data)
sum(is.na(data1))
summary(diabetes)
data = subset(diabetes, select=-c(bp.2s,bp.2d))
sum(is.na(data))
data1 = na.omit(data)
sum(is.na(data1))
summary(diabetes)
data = subset(diabetes, select=-c(bp.2s,bp.2d))
which(is.na(data))
data1 = na.omit(data)
sum(is.na(data1))
View(data)
data[,which(is.na(data))]
is.na(data)
sum(is.na(diabetes$bp.2s))
sum(is.na(diabetes$bp.2d))
sum(is.na(diabetes$bp.1d))
sum(is.na(data))
table(is.na(data))
rowSums(is.na(data))
sum(rowSums(is.na(data)))
which(is.na(data))
dim(which(is.na(data)))
dim(data)
is.na(data)
which(is.na(data),arr.ind = T)
summary(diabetes)
data = subset(diabetes, select=-c(bp.2s,bp.2d))
which(is.na(data))
data1 = na.omit(data)
summary(diabetes)
data = subset(diabetes, select=-c(bp.2s,bp.2d))
which(is.na(data))
data = na.omit(data)
knitr::opts_chunk$set(echo = TRUE)
library(faraway)
library(rpart)
attach(diabetes)
par(mfrow = c(3, 3))
plot(glyhb~., data=diabetes)
summary(diabetes)
data = subset(diabetes, select=-c(bp.2s,bp.2d))
which(is.na(data))
data = na.omit(data)
summary(diabetes)
data = subset(diabetes, select=-c(bp.2s,bp.2d))
which(is.na(data))
data = na.omit(data)
anyNA(subset(diabetes, select=-c(bp.2s,bp.2d)))
sum(!complete.cases(subset(diabetes, select=-c(bp.2s,bp.2d)))
)
summary(diabetes)
data = subset(diabetes, select=-c(bp.2s,bp.2d))
sum(complete.cases(data))
which(is.na(data))
data = na.omit(data)
summary(diabetes)
data = subset(diabetes, select=-c(bp.2s,bp.2d))
sum(!complete.cases(data))
which(is.na(data))
data = na.omit(data)
model.1c = rpart(glyhb~., data=diabetes)
plot(model.1c)
text(model.1c)
model.1c = rpart(glyhb~., data=diabetes,)
plot(model.1c,compress=T,uniform=T,branch=0.4,margin=.1)
text(model.1c)
model.1c = rpart(glyhb~., data=diabetes)
model.1c
plot(model.1c,compress=T,uniform=T,branch=0.4,margin=.1)
text(model.1c)
model.1c = rpart(glyhb~., data=data)
model.1c
plot(model.1c,compress=T,uniform=T,branch=0.4,margin=.1)
text(model.1c)
plot(model.1c,compress=T,uniform=T,branch=0.4,margin=.1)
text(model.1c)
model.1c$parms
model.1c$where
model.1c$call
model.1c$terms
model.1c$cptable
model.1c$method
model.1c$parms
model.1c$control
model.1c$frame
model.1c$control
model.1c$y
model.1c$ordered
model.1c$numresp
View(model.1c)
residuals(model.1c)
predict(model.1c)
data$glyhb - predict(model.1c)
residuals(model.1c)
plot(predict(model.1c),residuals(model.1c))
plotcp(model.1c)
myCPtable = model.1c$cptable
id.1se = min(which(myCPtable[,'xerror'] < my1se.err))
myCPtable = model.1c$cptable
id.min = which.min(myCPtable[,'xerror'])
my1se.err = myCPtable[id.min,'xerror'] + myCPtable[id.min, 'xstd']
id.1se = min(which(myCPtable[,'xerror'] < my1se.err))
CP.1se = (myCPtable[id.1se, 'CP'] + myCPtable[(id.1se-1), 'CP'])/2
tree.1se = prune.rpart(roze, CP.1se)
myCPtable = model.1c$cptable
id.min = which.min(myCPtable[,'xerror'])
my1se.err = myCPtable[id.min,'xerror'] + myCPtable[id.min, 'xstd']
id.1se = min(which(myCPtable[,'xerror'] < my1se.err))
CP.1se = (myCPtable[id.1se, 'CP'] + myCPtable[(id.1se-1), 'CP'])/2
tree.1se = prune.rpart(model.1c, CP.1se)
plot(tree.1se, compress=T,uniform=T,branch=0.4,margin=.1)
text(tree.1se)
tree.1se
library(faraway)
library(rpart)
attach(diabetes)
attach(wbca)
dim(wbca)
?wbca
mode.2a = glm(Class~., data=wbca, family=binomial)
summary(model.2a)
model.2a = glm(Class~., data=wbca, family=binomial)
summary(model.2a)
model.2b = step(model.2a, scope=list(upper=~., lower=~1))
step(model.2a, direction='both')
step(model.2a)
list(upper=~., lower=~1)
summary(model.2b)
model.2b = step(model.2a, scope=list(upper=~., lower=~1))
summary(model.2b)
phat=model.2b$fitted.values;
mypred = (phat>0.5)
table(wbca$Class, mypred)
phat
mypred
